#!/bin/bash
#
# general_bashrc_extension - part of the Arch-Setup project
# Copyright (C) 2023, Scott Wyman, development@scottwyman.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Meant to be sourced by the $HOME/.bashrc file. This allows you to keep
#  private information in your .bashrc, and non-private information in here.


export PAGER="bat --paging=always --style=plain"
export EDITOR=nvim
export CALCURSE_PAGER="bat --paging=always --style=plain --language=markdown"

alias up='ping quad9.net -c 4'
alias newsboat='newsboat -c ~/.config/newsboat/cache.db'
alias dlynx='lynx https://lite.duckduckgo.com -accept_all_cookies -cookie_file=/dev/null'

# Saves any running VirtualMachines before shutting down
shutdown_wrapper() {
    { which calcurse || type calcurse; } &>/dev/null && {
        [[ -f $HOME/.local/share/calcurse/.calcurse.pid ]] && {
            echo "You need to quit calcurse first... canceling shutdown..."
            return 1
        }
    }

    { which vm || type vm; } &>/dev/null && {
        vm list | grep "running" | while IFS= read -r line
        do
            vm save $(echo $line | awk '{print $1}')
        done
    }

    # Gives the user so many seconds to cancel the shutdown 
    echo -n -e "\nShutting Down In"
    for number in {5..1}
    do
        echo -n "...$number"
        sleep 1
    done
    echo -e "\n"
    shutdown $@ 
}

alias shutdown=shutdown_wrapper

htmd() {
    { which html2text || type html2text; } &>/dev/null \
        && bat --language=md <(html2text <(curl -L --silent "$1")) \
        || exit 1
}

spell() {
    words=$@

    for word in ${words[@]}
    do
        word=$(echo $word | tr '[:upper:]' '[:lower:]')
        html=$(curl -L --silent "https://duckduckgo.com/?q=spell+$word&ia=answer")

        echo $html | grep "appears to be spelled correctly" &>/dev/null && {
            echo "Spelled Correctly"; return 0; 
        } || { 
            alternatives=$(echo $html | sed -n 's/.*Suggestions:<\/i>\(.*\)<\/a>.*/\1/p' | sed 's/<[^>]*>//g')

            echo "Spelled wrong, possible alternative spellings: $alternatives" >&2

            return 1
        }
    done
}

define() {
    words=$@

    for word in ${words[@]}
    do
        word=$(echo $word | tr '[:upper:]' '[:lower:]')
        spell "$word" >/dev/null && {
            uppercase_word=$(echo $word | tr '[:lower:]' '[:upper:]' )
            URL="https://www.merriam-webster.com/dictionary/$word"

            curl -L --silent "$URL" \
                | grep --ignore-case "the meaning of $word is" | grep -o 'content=".*"' \
                | sed "s/content=//; s/The meaning of $uppercase_word is //; s/. How to use $word in a sentence.//" \
                | sed 's/"$//; s/"//' | sed 's/ Did you know?//'

            return 0
        }
        return 1
    done
}

presnap() {
    description="$1"
    configs=($(sudo snapper list-configs | awk 'NR>2 {print $1}'))
    for config in ${configs[@]}
    do
        sudo snapper -c $config create -d "$description" -t pre
    done
}

postsnap() {
    description="$1"
    configs=($(sudo snapper list-configs | awk 'NR>2 {print $1}'))
    for config in ${configs[@]}
    do
        pre_number=$(sudo snapper -c $config list | grep "pre" | grep "$description" | awk '{print $1}')
        sudo snapper -c $config create -d "$description" -t post --pre-number "$pre_number"
    done
}

deletesnap() {
    description="$1"
    configs=($(sudo snapper list-configs | awk 'NR>2 {print $1}'))
    for config in ${configs[@]}
    do
        pre_number=$(sudo snapper -c $config list | grep "pre" | grep "$description" | awk '{print $1}')
        snap_number=$(sudo snapper -c $config list | grep "$pre_number" | grep "$description" | awk -F '|' '{print $1}')
        sudo snapper -c $config delete $snap_number
    done
}

batt() {
    for capacity_path in $(ls /sys/class/power_supply/*/capacity);
    do
        batt_path=$(dirname $(ls $capacity_path))
        batt_name=$(basename $batt_path)
        capacity=$(cat $capacity_path)
        [[ "$(cat $batt_path/status 2> /dev/null)" == "Charging" ]] \
            && charging="+" \
            || charging="-"
        echo "$(basename $batt_name): $charging$capacity%"
    done
}

f() {
    fzf_path=$(find . -type d -o -type f | fzf --reverse)

    [[ -d $fzf_path ]] && lf $fzf_path
    [[ -f $fzf_path ]] && nvim $fzf_path -c "cd $(dirname $fzf_path)"
}

space() {
    filesystem_type=$(stat -f -c "%T" /)

    [[ "$filesystem_type" == "btrfs" ]] && {
        size=$(btrfs filesystem usage / 2>/dev/null | grep "Device size:" | awk '{print $3}')
        used=$(btrfs filesystem usage / 2>/dev/null | grep "Device allocated:" | awk '{print $3}')
        available=$(btrfs filesystem usage / 2>/dev/null | grep "Device unallocated:" | awk '{print $3}')

        printf "  %-12s %-12s %-12s\n" "Size" "Used" "Avail"
        printf "%-12s %-12s %-12s\n" "$size" "$used" "$available"
    } || {
        [[ "$filesystem_type" == "ext4" || "$filesystem_type" == "ext2/ext3" ]] \
            && df -h / \
            || echo "Unsupported filesystem type: '$filesystem_type'"
    }
}
