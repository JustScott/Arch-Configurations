#!/bin/bash
#
# general_bashrc_extension - part of the Arch-Setup project
# Copyright (C) 2023, Scott Wyman, development@scottwyman.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Meant to be sourced by the $HOME/.bashrc file. This allows you to keep
#  private information in your .bashrc, and non-private information in here.


export PAGER="bat --paging=always --style=plain"
export EDITOR=nvim
export CALCURSE_PAGER="bat --paging=always --style=plain --language=markdown"

alias up='ping quad9.net -c 4'
alias newsboat='newsboat -c ~/.config/newsboat/cache.db'
alias dlynx='lynx https://lite.duckduckgo.com -accept_all_cookies -cookie_file=/dev/null'

htmd() {
    { which html2text || type html2text; } &>/dev/null \
        && bat --language=md <(html2text <(curl -L --silent "$1")) \
        || exit 1
}

presnap() {
    description="$1"
    sudo snapper -c root create -d "$description" -t pre
    sudo snapper -c home create -d "$description" -t pre
}

postsnap() {
    description="$1"
    root_pre_number=$(sudo snapper -c root list | awk '{print $1}' | tail -n 1)
    sudo snapper -c root create -d "$description" -t post --pre-number $root_pre_number
    home_pre_number=$(sudo snapper -c home list | awk '{print $1}' | tail -n 1)
    sudo snapper -c home create -d "$description" -t post --pre-number $home_pre_number
}

batt() {
    for capacity_path in $(ls /sys/class/power_supply/*/capacity);
    do
        batt_path=$(dirname $(ls $capacity_path))
        batt_name=$(basename $batt_path)
        capacity=$(cat $capacity_path)
        echo "$(basename $batt_name): $capacity%"
    done
}

f() {
    fzf_path=$(find . -type d -o -type f | fzf --reverse)

    [[ -d $fzf_path ]] && lf $fzf_path
    [[ -f $fzf_path ]] && nvim $fzf_path -c "cd $(dirname $fzf_path)"
}

space() {
    filesystem_type=$(stat -f -c "%T" /)

    [[ "$filesystem_type" == "btrfs" ]] && {
        btrfs filesystem df /
    } || {
        [[ "$filesystem_type" == "ext4" || "$filesystem_type" == "ext2/ext3" ]] \
            && df -h / \
            || echo "Unsupported filesystem type: '$filesystem_type'"
    }
}
