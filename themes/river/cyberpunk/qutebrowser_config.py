# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html


c.zoom.default = '140%'
c.fonts.hints = '18pt default_family'

# Increase favicon size
c.tabs.favicons.scale = 1.8
# Add padding around tab text
c.tabs.padding = {"top": 8, "bottom": 8, "left": 10, "right": 10}
# Increase tab font size
c.fonts.tabs.selected = '18pt default_family'
c.fonts.tabs.unselected = '16pt default_family'

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:133.0) Gecko/20100101 Firefox/133.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/administrator/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/administrator/.local/share/qutebrowser/userscripts/*')

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = 'white'

# Render all web contents using a dark theme. On QtWebEngine < 6.7, this
# setting requires a restart and does not support URL patterns, only the
# global setting is applied. Example configurations from Chromium's
# `chrome://flags`: - "With simple HSL/CIELAB/RGB-based inversion": Set
# `colors.webpage.darkmode.algorithm` accordingly, and   set
# `colors.webpage.darkmode.policy.images` to `never`.  - "With selective
# image inversion": qutebrowser default settings.
# Type: Bool
c.colors.webpage.darkmode.enabled = True


# Webpage background
c.colors.webpage.bg = "#1f1f2f"

# Completion menu
c.colors.completion.fg = "#c8d3f5"
c.colors.completion.even.bg = "#1f1f2f"
c.colors.completion.odd.bg = "#1f1f2f"
c.colors.completion.match.fg = "#ff6ac1"
c.colors.completion.category.bg = "#2a2a3f"
c.colors.completion.category.fg = "#c8d3f5"
c.colors.completion.category.border.top = "#2a2a3f"
c.colors.completion.category.border.bottom = "#2a2a3f"
c.colors.completion.item.selected.bg = "#2a2a3f"
c.colors.completion.item.selected.fg = "#ff6ac1"
c.colors.completion.item.selected.border.top = "#ff6ac1"
c.colors.completion.item.selected.border.bottom = "#ff6ac1"
c.colors.completion.scrollbar.bg = "#1f1f2f"
c.colors.completion.scrollbar.fg = "#c8d3f5"

# Statusbar
c.colors.statusbar.normal.bg = "#1f1f2f"
c.colors.statusbar.normal.fg = "#c8d3f5"
c.colors.statusbar.insert.bg = "#5af78e"
c.colors.statusbar.insert.fg = "#1f1f2f"
c.colors.statusbar.command.bg = "#2a2a3f"
c.colors.statusbar.command.fg = "#c8d3f5"
c.colors.statusbar.url.fg = "#57c7ff"
c.colors.statusbar.url.hover.fg = "#ff6ac1"
c.colors.statusbar.url.success.http.fg = "#5af78e"
c.colors.statusbar.url.success.https.fg = "#5af78e"
c.colors.statusbar.url.warn.fg = "#f3f99d"
c.colors.statusbar.url.error.fg = "#ff5c57"

# Tabs
c.colors.tabs.bar.bg = "#1f1f2f"
c.colors.tabs.odd.bg = "#1f1f2f"
c.colors.tabs.odd.fg = "#c8d3f5"
c.colors.tabs.even.bg = "#1f1f2f"
c.colors.tabs.even.fg = "#c8d3f5"
c.colors.tabs.selected.odd.bg = "#ff6ac1"
c.colors.tabs.selected.odd.fg = "#1f1f2f"
c.colors.tabs.selected.even.bg = "#ff6ac1"
c.colors.tabs.selected.even.fg = "#1f1f2f"

# Hints
c.colors.hints.bg = "#f3f99d"
c.colors.hints.fg = "#1f1f2f"
c.colors.hints.match.fg = "#ff5c57"

# Messages
c.colors.messages.info.bg = "#2a2a3f"
c.colors.messages.info.fg = "#c8d3f5"
c.colors.messages.warning.bg = "#f3f99d"
c.colors.messages.warning.fg = "#1f1f2f"
c.colors.messages.error.bg = "#ff5c57"
c.colors.messages.error.fg = "#1f1f2f"

# Downloads
c.colors.downloads.bar.bg = "#1f1f2f"
c.colors.downloads.start.bg = "#57c7ff"
c.colors.downloads.start.fg = "#1f1f2f"
c.colors.downloads.stop.bg = "#5af78e"
c.colors.downloads.stop.fg = "#1f1f2f"
c.colors.downloads.error.bg = "#ff5c57"
c.colors.downloads.error.fg = "#1f1f2f"

# Keyhint
c.colors.keyhint.fg = "#c8d3f5"
c.colors.keyhint.bg = "#1f1f2f"
c.colors.keyhint.suffix.fg = "#ff6ac1"

# Prompts
c.colors.prompts.bg = "#2a2a3f"
c.colors.prompts.fg = "#c8d3f5"
c.colors.prompts.border = "#c8d3f5"
c.colors.prompts.selected.bg = "#ff6ac1"
c.colors.prompts.selected.fg = "#1f1f2f"
